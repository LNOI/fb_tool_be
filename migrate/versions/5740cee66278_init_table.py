"""init table

Revision ID: 5740cee66278
Revises: 
Create Date: 2024-11-30 13:27:00.768892

"""

from typing import Sequence, Union
import sqlmodel
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "5740cee66278"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "accounts",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("userId", sa.Uuid(), nullable=False),
        sa.Column("type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("provider", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "providerAccountId", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("refresh_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("access_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires_at", sa.Integer(), nullable=False),
        sa.Column("id_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("scope", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("session_state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("token_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "history_scrape",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("userId", sa.Uuid(), nullable=False),
        sa.Column("keyword", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("num_groups", sa.Integer(), nullable=True),
        sa.Column("num_posts", sa.Integer(), nullable=True),
        sa.Column("num_comments", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sessions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("userId", sa.Uuid(), nullable=False),
        sa.Column("expires", sa.DateTime(), nullable=False),
        sa.Column("sessionToken", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "template_message",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("userId", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("images", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("tags", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("avatar", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("scopes", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "verification_token",
        sa.Column("identifier", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires", sa.DateTime(), nullable=False),
        sa.Column("token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("identifier", "token"),
    )
    op.create_table(
        "group",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("userId", sa.Uuid(), nullable=False),
        sa.Column("link", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("privacy", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("members", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "posting_frequency", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("is_member", sa.Boolean(), nullable=False),
        sa.Column("user_admin", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("hc_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["hc_id"],
            ["history_scrape.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "message",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("template_id", sa.Uuid(), nullable=True),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("link_images", sa.ARRAY(sa.String()), nullable=True),
        sa.Column(
            "receiver_user_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "receiver_user_profile", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=True),
        sa.ForeignKeyConstraint(
            ["template_id"],
            ["template_message.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "post",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("group_id", sa.Uuid(), nullable=True),
        sa.Column("userId", sa.Uuid(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("link", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("images", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("reaction", sa.Integer(), nullable=False),
        sa.Column("owner_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("owner_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("post_date", sa.DateTime(), nullable=True),
        sa.Column("hc_id", sa.Uuid(), nullable=False),
        sa.Column("category", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["hc_id"],
            ["history_scrape.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "comment",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("post_id", sa.Uuid(), nullable=False),
        sa.Column("userId", sa.Uuid(), nullable=False),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("images", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("owner_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("owner_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("comment_date", sa.DateTime(), nullable=True),
        sa.Column("hc_id", sa.Uuid(), nullable=False),
        sa.Column("category", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("message", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["hc_id"],
            ["history_scrape.id"],
        ),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["post.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("comment")
    op.drop_table("post")
    op.drop_table("message")
    op.drop_table("group")
    op.drop_table("verification_token")
    op.drop_table("users")
    op.drop_table("template_message")
    op.drop_table("sessions")
    op.drop_table("history_scrape")
    op.drop_table("accounts")
    # ### end Alembic commands ###
